/*
 * Copyright (C) 2016 Laboratoire ThéMA - UMR 6049 - CNRS / Université de Franche-Comté
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.thema.fracgis.method.raster.multi;

import java.awt.Rectangle;
import java.awt.image.BandedSampleModel;
import java.awt.image.BufferedImage;
import java.awt.image.ComponentSampleModel;
import java.awt.image.DataBuffer;
import java.awt.image.Raster;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import jwave.transforms.wavelets.daubechies.Daubechies20;
import org.thema.common.Config;
import org.thema.common.Util;
import org.thema.common.swing.TaskMonitor;
import org.thema.drawshape.image.RasterShape;
import org.thema.drawshape.layer.DefaultGroupLayer;
import org.thema.drawshape.layer.RasterLayer;
import org.thema.drawshape.style.RasterStyle;
import org.thema.fracgis.estimation.MultiFracEstimationFrame;
import org.thema.fracgis.sampling.DefaultSampling;

/**
 *
 * @author gvuidel
 */
public class DWTFrame extends javax.swing.JFrame {

    private BufferedImage im;
    private Raster initRaster;
    private double[][] img;
    private int iter;
    
    /**
     * Creates new form DWTFrame
     */
    public DWTFrame() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapViewer = new org.thema.drawshape.ui.MapViewer();
        forwardButton = new javax.swing.JButton();
        inverseButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        varTextField = new javax.swing.JTextField();
        cwtButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        forwardButton.setText("Forward");
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });

        inverseButton.setText("Inverse");
        inverseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inverseButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load img");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        varTextField.setText("10");

        cwtButton.setText("Convol");
        cwtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cwtButtonActionPerformed(evt);
            }
        });

        jButton1.setText("MultiFrac");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mapViewer, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(forwardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inverseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(varTextField)
                    .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cwtButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(forwardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inverseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(varTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cwtButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(mapViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
        new DWT(new Daubechies20()).FWT1(img, iter++);
        WritableRaster r = Raster.createWritableRaster(new BandedSampleModel(
                DataBuffer.TYPE_DOUBLE, img[0].length, img.length, 1), null);
        for(int i = 0; i < img.length; i++) {
            for(int j = 0; j < img[0].length; j++) {
                r.setSample(j, i, 0, img[i][j]);
            }
        }
        ((DefaultGroupLayer)mapViewer.getLayers()).addLayerFirst(new RasterLayer(""+iter, 
                new RasterShape(r, new Rectangle(r.getWidth(), r.getHeight()), new RasterStyle(), true)));
    }//GEN-LAST:event_forwardButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        
        File f = Util.getFile(".tif", "Image");
        if(f == null) {
            return;
        }
        try {
            im = ImageIO.read(f);
            WritableRaster r = im.getRaster();
            int w = (int)Math.pow(2, Math.ceil(Math.log(r.getWidth()) / Math.log(2)));
            int dw = (w-r.getWidth()) / 2;
            int h = (int)Math.pow(2, Math.ceil(Math.log(r.getHeight()) / Math.log(2)));
            int dh = (h-r.getHeight()) / 2;
            img = new double[w][h];
            for(int i = 0; i < r.getHeight(); i++) {
                for(int j = 0; j < r.getWidth(); j++) {
                    img[i+dh][j+dw] = r.getSample(j, i, 0);
                }
            }
            initRaster = r;
            iter = 0;
            ((DefaultGroupLayer)mapViewer.getLayers()).addLayerFirst(new RasterLayer(f.getName(), 
                    new RasterShape(r, new Rectangle(r.getWidth(), r.getHeight()), new RasterStyle(), true)));
        } catch (IOException ex) {
            Logger.getLogger(DWTFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void inverseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inverseButtonActionPerformed
        new DWT(new Daubechies20()).IWT1(img, --iter);
        WritableRaster r = Raster.createWritableRaster(new BandedSampleModel(
                DataBuffer.TYPE_DOUBLE, img[0].length, img.length, 1), null);
        for(int i = 0; i < img.length; i++) {
            for(int j = 0; j < img[0].length; j++) {
                r.setSample(j, i, 0, img[i][j]);
            }
        }
        ((DefaultGroupLayer)mapViewer.getLayers()).addLayerFirst(new RasterLayer(""+iter, 
                new RasterShape(r, new Rectangle(r.getWidth(), r.getHeight()), new RasterStyle(), true)));
    }//GEN-LAST:event_inverseButtonActionPerformed

    private void cwtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cwtButtonActionPerformed
        int var  = Integer.parseInt(varTextField.getText());
        CWT cwt = new CWT();
        cwt.calcCWT(initRaster, var);
//        ((DefaultGroupLayer)mapViewer.getLayers()).addLayerFirst(new RasterLayer("conv_"+var, 
//                new RasterShape(cwt.conv, new Rectangle(cwt.conv.getWidth(), cwt.conv.getHeight()), new RasterStyle(), true)));
        ((DefaultGroupLayer)mapViewer.getLayers()).addLayerFirst(new RasterLayer("kapa_"+var, 
                new RasterShape(cwt.kapa, new Rectangle(cwt.kapa.getWidth(), cwt.kapa.getHeight()), new RasterStyle(), true)));
        ((DefaultGroupLayer)mapViewer.getLayers()).addLayerFirst(new RasterLayer("mod_"+var, 
                new RasterShape(cwt.mod, new Rectangle(cwt.mod.getWidth(), cwt.mod.getHeight()), new RasterStyle(), true)));
        ((DefaultGroupLayer)mapViewer.getLayers()).addLayerFirst(new RasterLayer("arg_"+var, 
                new RasterShape(cwt.arg, new Rectangle(cwt.arg.getWidth(), cwt.arg.getHeight()), new RasterStyle(), true)));
        ((DefaultGroupLayer)mapViewer.getLayers()).addLayerFirst(new RasterLayer("chain_"+var, 
                new RasterShape(cwt.chain, new Rectangle(cwt.chain.getWidth(), cwt.chain.getHeight()), new RasterStyle(), true)));
        ((DefaultGroupLayer)mapViewer.getLayers()).addLayerFirst(new RasterLayer("goodchain_"+var, 
                new RasterShape(cwt.goodchain, new Rectangle(cwt.goodchain.getWidth(), cwt.goodchain.getHeight()), new RasterStyle(), true)));
    }//GEN-LAST:event_cwtButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        WTMMMethod wtmm = new WTMMMethod("", new DefaultSampling(3, 30, 3), im, null);
        wtmm.execute(new TaskMonitor.EmptyMonitor(), true);
        new MultiFracEstimationFrame(this, wtmm).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Config.setNodeClass(DWTFrame.class);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DWTFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DWTFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DWTFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DWTFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DWTFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cwtButton;
    private javax.swing.JButton forwardButton;
    private javax.swing.JButton inverseButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton loadButton;
    private org.thema.drawshape.ui.MapViewer mapViewer;
    private javax.swing.JTextField varTextField;
    // End of variables declaration//GEN-END:variables
}
